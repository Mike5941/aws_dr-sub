name: Provisioning with Terraform after signing in to AWS
on: [push]

permissions:
      id-token: write
      contents: read

jobs:
  network:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Network Resource Actions
      - name: Network/Terraform Apply
        if: github.event.inputs.action == 'apply' && (github.event.inputs.resource == 'all' || github.event.inputs.resource == 'network')
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./network/primary


      # Database Resource Actions
      - name: Database/Terraform Apply
        if: github.event.inputs.action == 'apply' && (github.event.inputs.resource == 'all' || github.event.inputs.resource == 'database')
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./database/mysql

      - name: Database/Terraform Destroy
        if: github.event.inputs.action == 'destroy' && (github.event.inputs.resource == 'all' || github.event.inputs.resource == 'database')
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./database/mysql

      - name: Network/Terraform Destroy
        if: github.event.inputs.action == 'destroy' && (github.event.inputs.resource == 'all' || github.event.inputs.resource == 'network')
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./network/primary